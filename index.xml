<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Marian's Blog</title><link>https://devblog.dziubiak.pl/</link><description>Recent content on Marian's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://devblog.dziubiak.pl/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Exporting EventSource logs to CSV</title><link>https://devblog.dziubiak.pl/telemetry/01-exporting-eventsource-locally/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devblog.dziubiak.pl/telemetry/01-exporting-eventsource-locally/</guid><description>1. Exporting EventSource logs to CSV # Here&amp;rsquo;s a scenario - you&amp;rsquo;re building a service and you&amp;rsquo;re emitting logs as you should be. But your service is configured to send those logs to a log collector. You don&amp;rsquo;t have a lot of budget and you&amp;rsquo;re using a log collector in production but locally you only write out to console (or Debug window in Visual Studio). Maybe you want to persist your logs over a few sessions, maybe you have an automated test environment which hosts your service without console output being saved anywhere.</description></item><item><title>1. Using NuGet packages as plugins</title><link>https://devblog.dziubiak.pl/stride/01-nuget-plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devblog.dziubiak.pl/stride/01-nuget-plugins/</guid><description>1. Using NuGet packages as plugins # This post will be describing my journey to get a sensible plugin orchestration and delivery mechanism in place for the Stride game engine. My main goal is to use NuGet architecture as much as possible and deliver a user experience that doesn&amp;rsquo;t require you to be a genius, nor has you copy-pasting things around too much. And because plugins are only meant for build time, and may target something else than your game, they cannot be directly referenced the usual way.</description></item><item><title>1. Writing system tests</title><link>https://devblog.dziubiak.pl/iqa-management-hub/01-writing-system-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devblog.dziubiak.pl/iqa-management-hub/01-writing-system-tests/</guid><description>1. Writing system tests # So here I am - I made a decision to make a rewrite of the service. Where do I start? Well, the number one thing I want to do is to try to follow good practices. I don&amp;rsquo;t want to just write this thing from scratch and swap them out in one go, possibly breaking tens of existing users with something I haven&amp;rsquo;t tested. So I need to first document how the existing service works.</description></item></channel></rss>