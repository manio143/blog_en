<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stride on Marian's Blog</title><link>https://devblog.dziubiak.pl/stride/</link><description>Recent content in Stride on Marian's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://devblog.dziubiak.pl/stride/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Using NuGet packages as plugins</title><link>https://devblog.dziubiak.pl/stride/01-nuget-plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devblog.dziubiak.pl/stride/01-nuget-plugins/</guid><description>1. Using NuGet packages as plugins # This post will be describing my journey to get a sensible plugin orchestration and delivery mechanism in place for the Stride game engine. My main goal is to use NuGet architecture as much as possible and deliver a user experience that doesn&amp;rsquo;t require you to be a genius, nor has you copy-pasting things around too much. And because plugins are only meant for build time, and may target something else than your game, they cannot be directly referenced the usual way.</description></item></channel></rss>